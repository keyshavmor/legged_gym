import torch
import torch.nn.functional as F
import matplotlib.pyplot as plt

# Provided estimated and target data tensors
target_data = torch.tensor([1.1554, -0.5841, -0.4333, -0.1675,  0.8697, -2.0828,  0.9891,  0.2521,
        -0.7062,  0.2621,  0.4965,  0.0573, -1.2835,  2.0421, -1.1315,  0.2719,
         1.8495, -0.9189, -0.6893, -0.7365, -0.1874, -0.7837,  0.0224,  1.4495,
        -1.5230,  0.8523,  0.7835,  0.6326, -1.0565,  1.4618, -0.4603, -0.6853,
        -1.0297,  1.4197,  0.8705,  0.5961,  0.0366, -0.7499,  0.5689, -1.7136,
        -0.0243,  0.7552,  0.2437,  0.1797,  1.0640, -1.9081,  0.9688, -1.2830,
         0.0030,  0.9599,  0.4534,  0.1792,  0.6976, -1.8782,  0.9658, -1.3840,
        -0.6715,  1.0833,  0.4061,  0.4638,  0.8425, -1.4137,  0.8778, -1.5918,
         0.8126,  0.2742,  0.0258, -0.1269,  0.9037, -2.2300,  1.0139, -0.6762,
        -0.6526,  0.0999,  0.3970,  0.0030, -1.1851,  2.1136, -1.1684,  0.4013,
         1.3653, -1.0245, -0.7183, -0.7773, -0.5374,  0.4734, -0.5532,  1.7805,
        -1.3114,  0.3152,  0.5114,  0.4629, -1.1321,  1.9707, -0.7257, -0.0840,
        -1.2205,  0.3590,  0.5383,  0.3994, -1.1727,  1.9734, -0.8068, -0.0627,
         1.4612, -0.8294, -0.6330, -0.3175,  0.5527, -1.7872,  0.7951,  0.7590,
        -1.4769,  1.2154,  0.9799,  0.6593, -0.8992,  0.8953, -0.2410, -1.1295,
         0.7868,  0.0187, -0.1157, -0.0962,  1.1096, -2.2141,  1.0024, -0.4945,
        -0.7783,  0.9035,  0.9295,  0.1745, -1.4937,  1.5578, -0.9451, -0.3407,
        -0.2541, -0.3478, -0.0547, -0.4588, -0.6447,  2.1795, -1.2898,  0.8793,
         0.5809,  0.2675,  0.0043, -0.0456,  1.1345, -2.1778,  0.9984, -0.7655,
        -0.4392,  0.9703,  0.3419,  0.3540,  0.9638, -1.6239,  0.9215, -1.4921,
         1.4016, -1.2644, -0.9869, -0.5051, -0.0167, -0.5256,  0.1927,  1.7100,
         1.5785, -0.7667, -0.6095, -0.3988,  0.4794, -1.7605,  0.7157,  0.7631,
        -0.8371,  1.1806,  0.5000,  0.5440,  0.6635, -1.2270,  0.8293, -1.6561,
         1.1724,  0.6488,  0.3451, -0.3066,  0.2403, -2.2013,  0.7964, -0.6962,
        -1.7162,  1.0499,  0.7949,  0.8058, -0.7475,  0.9699, -0.0733, -1.0805,
         0.6429, -0.8614, -0.5828, -0.6983, -0.6467,  1.4498, -0.9240,  1.6299,
        -0.2045, -0.2565,  0.0760, -0.3862, -0.9060,  2.1167, -1.2971,  0.8670,
         1.9409, -0.7815, -0.5693, -0.8177, -0.3846, -0.6786, -0.1300,  1.4271,
         0.4863,  1.1213,  0.6810, -0.0312,  0.1629, -1.9561,  0.7926, -1.2587,
         0.4049,  0.3815,  0.0576,  0.0124,  1.1959, -2.1207,  0.9755, -0.9109,
        -0.6104,  0.1445,  0.4202, -0.0165, -1.2339,  2.0842, -1.1801,  0.4010,
         0.0759,  0.6031,  0.1553,  0.1341,  1.2132, -1.9712,  0.9482, -1.1626,
         1.3362, -1.2478, -0.9663, -0.3395,  0.1729, -1.0031,  0.5264,  1.5250,
         1.2144,  0.0457, -0.0996, -0.2751,  0.7084, -2.2344,  0.9400, -0.3010,
         1.8928, -0.5443, -0.3365, -0.9123, -0.8686, -0.1186, -0.5593,  1.4552,
        -1.6683,  1.2123,  0.7299,  0.8821, -0.2333,  0.1807,  0.3839, -1.4869,
        -0.2126,  0.7982,  0.2416,  0.2511,  1.1310, -1.7985,  0.9361, -1.3508,
         1.1753, -0.4060, -0.3503, -0.2011,  0.8808, -2.1416,  0.9762,  0.0652,
        -0.5145, -0.0257,  0.3103, -0.1116, -1.1051,  2.1402, -1.2318,  0.5473,
        -0.4175,  1.1664,  0.5953,  0.3464,  0.5576, -1.5530,  0.8844, -1.5826,
         1.1796, -0.7119, -0.5100, -0.1646,  0.8079, -2.0117,  0.9786,  0.4314,
        -0.6154, -0.0544,  0.3116, -0.0487, -1.0404,  2.1797, -1.2035,  0.4800,
        -1.1899,  1.3620,  0.7837,  0.6780,  0.1139, -0.6388,  0.5917, -1.7021,
        -0.5875,  0.3883,  0.5785,  0.0077, -1.3992,  1.9479, -1.1613,  0.2346,
        -1.2249,  0.3206,  0.5174,  0.4025, -1.1598,  1.9925, -0.8020, -0.0390,
         1.8495, -0.3470, -0.3315, -0.5942,  0.1933, -1.8474,  0.5534,  0.5258,
        -0.4305, -0.1488,  0.2142, -0.2206, -0.9505,  2.1760, -1.2787,  0.6480,
        -0.3066,  1.1580,  0.6082,  0.3017,  0.5256, -1.6261,  0.8892, -1.5531,
        -1.7005,  0.7033,  0.6486,  0.7460, -0.9484,  1.4933, -0.2874, -0.6502,
         0.2213, -0.7779, -0.6189, -0.6327, -0.4939,  1.7728, -0.9642,  1.5025])

estimated_data= torch.tensor([ 0.0675, -0.0348, -0.0073, -0.0157,  0.0662, -0.0620, -0.0300,  0.0070,
         0.0353, -0.0594, -0.0557, -0.0194,  0.0388, -0.0712,  0.0202, -0.0096,
         0.0563, -0.0589, -0.0497,  0.0215,  0.0552, -0.0294,  0.0163, -0.0256,
         0.0388, -0.0434, -0.0531,  0.0109,  0.0561, -0.0501,  0.0120, -0.0136,
         0.0084, -0.0612, -0.0680,  0.0211,  0.0694, -0.0533,  0.0119,  0.0005,
         0.0660, -0.0553, -0.0461,  0.0187,  0.0359, -0.0610,  0.0056, -0.0245,
         0.0873, -0.0658, -0.0315,  0.0118,  0.0599, -0.0337, -0.0427, -0.0030,
         0.0203, -0.0571, -0.0553,  0.0008,  0.0557, -0.0617,  0.0145, -0.0077,
         0.0421, -0.0419, -0.0565,  0.0158,  0.0566, -0.0477,  0.0173, -0.0177,
         0.0232, -0.0242, -0.0354, -0.0052,  0.0236, -0.0714, -0.0099, -0.0021,
         0.0126, -0.0194, -0.0607, -0.0344,  0.0588, -0.0527,  0.0068,  0.0190,
         0.0446, -0.0442, -0.0558,  0.0159,  0.0574, -0.0452,  0.0135, -0.0185,
         0.0662, -0.0392, -0.0688, -0.0342,  0.0980, -0.0480, -0.0039, -0.0312,
         0.0469, -0.0528, -0.0539,  0.0062,  0.0641, -0.0449,  0.0072, -0.0188,
         0.0494, -0.0292, -0.0705, -0.0030,  0.0496, -0.0558, -0.0108, -0.0112,
         0.0342, -0.0373, -0.0580,  0.0065,  0.0543, -0.0477,  0.0211, -0.0291,
         0.0234, -0.0450, -0.0371, -0.0083,  0.0569, -0.0738,  0.0178,  0.0034,
        -0.0105, -0.0675, -0.0714, -0.0346,  0.0589, -0.0275,  0.0010,  0.0117,
         0.0318, -0.0189, -0.0399,  0.0012,  0.0410, -0.0864,  0.0235,  0.0309,
         0.0402, -0.0571, -0.0395,  0.0340,  0.0407, -0.0746, -0.0179, -0.0321,
         0.0238, -0.0435, -0.0660,  0.0085,  0.0611, -0.0443,  0.0239, -0.0141,
         0.0384, -0.0570, -0.0569,  0.0385,  0.0659, -0.0590,  0.0071,  0.0174,
         0.0647, -0.0450, -0.0458,  0.0070,  0.0258, -0.0945,  0.0310,  0.0059,
         0.0284, -0.0479, -0.0325,  0.0053,  0.0283, -0.0439,  0.0232, -0.0047,
         0.0299, -0.0503, -0.0777,  0.0003,  0.0417, -0.0414,  0.0058, -0.0377,
         0.1020, -0.0059, -0.0546, -0.0251,  0.0830, -0.0132, -0.0162, -0.0179,
         0.0580, -0.0347, -0.0763, -0.0306,  0.1039, -0.0305, -0.0280,  0.0127,
         0.0229, -0.0464, -0.0496,  0.0008,  0.0927, -0.0293, -0.0006, -0.0060,
         0.0435, -0.0270, -0.0652, -0.0302,  0.0917, -0.0336, -0.0113, -0.0185,
         0.0371, -0.0586, -0.0784,  0.0196,  0.0525, -0.0478,  0.0039, -0.0087,
         0.0245, -0.0429, -0.0582,  0.0062,  0.0244, -0.0619,  0.0346,  0.0045,
         0.0290, -0.0379, -0.0591, -0.0080,  0.0595, -0.0331,  0.0246, -0.0003,
         0.0397, -0.0376, -0.0523,  0.0177,  0.0875, -0.0732, -0.0529, -0.0056,
         0.0389, -0.0519, -0.0508, -0.0021,  0.0436, -0.0506,  0.0075, -0.0063,
         0.0389, -0.0554, -0.0595,  0.0194,  0.0742, -0.0719, -0.0014,  0.0239,
         0.0145, -0.0700, -0.0557, -0.0700,  0.0584,  0.0105,  0.0164, -0.0101,
         0.0342, -0.0434, -0.0610,  0.0070,  0.0534, -0.0512,  0.0128, -0.0150,
         0.0430, -0.0473, -0.0544,  0.0130,  0.0628, -0.0528,  0.0037, -0.0132,
         0.0382, -0.0517, -0.0555,  0.0018,  0.0516, -0.0494,  0.0158, -0.0239,
         0.0164, -0.0125, -0.0671, -0.0284,  0.0485, -0.0655, -0.0187,  0.0030,
         0.0533, -0.0593, -0.0748,  0.0272,  0.0431, -0.0587,  0.0251,  0.0076,
         0.0429, -0.0346, -0.0646,  0.0159,  0.0711, -0.0289,  0.0061, -0.0083,
         0.0245, -0.0323, -0.0566,  0.0150,  0.0726, -0.0547,  0.0121,  0.0151,
         0.0520, -0.0544, -0.0389,  0.0093,  0.0465, -0.0380,  0.0061, -0.0082,
         0.0374, -0.0534, -0.0717,  0.0031,  0.0323, -0.0513,  0.0424, -0.0055,
         0.0424, -0.0453, -0.0688,  0.0085,  0.0603, -0.0501,  0.0229, -0.0493,
         0.0466, -0.0426, -0.0463,  0.0292,  0.0590, -0.0957, -0.0177, -0.0296,
         0.0304, -0.0732, -0.0599,  0.0232,  0.0356, -0.0751,  0.0290,  0.0019,
         0.0314, -0.0545, -0.0610,  0.0089,  0.0497, -0.0450,  0.0360, -0.0039,
         0.0439, -0.0350, -0.0369,  0.0120,  0.0457, -0.0459,  0.0236,  0.0219])

# Calculating MSE
mse_loss = F.mse_loss(estimated_data, target_data)
print(mse_loss.item())



# Plotting the distribution of target data
plt.figure(figsize=(10, 6))
plt.hist(target_data, bins=30, edgecolor='black', alpha=0.7, color='blue')
plt.title('Distribution of Target Values')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.hist(estimated_data, bins=30, edgecolor='black', alpha=0.7, color='blue')
plt.title('Distribution of Estimated Values')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()
